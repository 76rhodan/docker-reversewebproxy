#!/bin/bash
#shellcheck shell=bash

#for testing purposes only, remove before flight
GEOIP_COUNTRIES="AA,BB,CC,DD"
GEOIP_DEFAULT=allow
#for testing purposes only, remove before flight

APPNAME="$(hostname)/GeoIP"
#GEOIPDIR="/usr/share/GeoIP"
GEOIPDIR="/home/pi/GeoIP"
echo "[$APPNAME][$(date)] Installing GeoIP Database and set up nginx configuration"
echo $geoipfail
# create GeoIP directory and install lates GeoIP DB
mkdir -p $GEOIPDIR

#<<excluded
# get the GeoIP databases
geoipfail=false
! curl --fail -sL -o "$GEOIPDIR"/GeoIP.dat.gz https://mailfud.org/geoip-legacy/GeoIP.dat.gz && geoipfail=true || true
! curl --fail -sL -o "$GEOIPDIR"/GeoIPv6.dat.gz https://mailfud.org/geoip-legacy/GeoIPv6.dat.gz && geoipfail=true || true

#as there is an one hour download limit, backup the files to /tmp
if [[ "$geoipfail" == "false" ]]
then
  echo "[$APPNAME][$(date)] Backup mailfud GeoIP DB to /run/nginx/.geoip"
  cp "$GEOIPDIR"/GeoIP.dat.gz /tmp #CHANGE THE DIR!
  cp "$GEOIPDIR"/GeoIPv6.dat.gz /tmp #CHANGE THE DIR!
fi

#If the mailfud download fails, lets see if we have a  backup and try to copy it into the right place.
if [[ "$geoipfail" == "true" ]]
then
  if [[ -f /tmp/GeoIP.dat.gz && -f /tmp/GeoIPv6.dat.gz ]];
   then
    backupfail=false
    echo "[$APPNAME][$(date)] Using backuped DB"
    [[ -f /tmp/GeoIP.dat.gz ]] && cp /tmp/GeoIP.dat.gz /"$GEOIPDIR"
    [[ -f /tmp/GeoIPv6.dat.gz ]] && cp /tmp/GeoIPv6.dat.gz /"$GEOIPDIR"
   else backupfail=true
  fi
fi

# if we couldn't get the databases and the backup is not working either, let's fall back to another database:
if [[ "$geoipfail" == "true" ]] && [[ "$backupfail" == "true" ]]
then
  centminfail=false
  echo "[$APPNAME][$(date)] Couldn't download the mailfud GeoIP DB or use a backup. Now trying centminmod"
  ! curl --fail -sL -o "$GEOIPDIR"/GeoIP.dat.gz https://centminmod.com/centminmodparts/geoip-legacy/GeoIP.dat.gz && centminfail=true || true
  ! curl --fail -sL -o "$GEOIPDIR"/GeoIPv6.dat.gz https://centminmod.com/centminmodparts/geoip-legacy/GeoIPv6.dat.gz && geoipfail=true || true
fi

if [[ "$geoipfail" == "true" ]] && [[ "$backupfail" == "true" ]] && [[ "$backupfail" == "centminfail" ]]
then
  echo "[$APPNAME][$(date)] Couldn't retrieve any newer GeoIP databases. Your database may be out of date."
else
  echo "[$APPNAME][$(date)] DB sucessfully downloaded"
fi

gunzip -f "$GEOIPDIR"/GeoIP.dat.gz
gunzip -f "$GEOIPDIR"/GeoIPv6.dat.gz

#read country codes from the variable
IFS=“,” read -ra include_list <<< “$GEOIP_COUNTRIES”

#set the default GeoIP in /etc/nginx/nginx.conf
case "$GEOIP_DEFAULT" in
  allow|ALLOW)
  echo "[$APPNAME][$(date)] Default is set to allow every country but block the listed"
  sed -i '/^#defaultsetting.*/a default yes;' /home/pi/geoip_countries.conf
  for a in ${include_list[@]}
    do
    sed -i "/^#countrylist.*/a $a no;" /home/pi/geoip_countries.conf
  done
  ;;
  block|BLOCK)
  echo "[$APPNAME][$(date)] Default is set to block every country and only allow the listed"
  sed -i '/^#defaultsetting.*/a default no;' /home/pi/geoip_countries.conf
  for a in ${include_list[@]}
    do
    sed -i "/^#countrylist.*/a $a yes;" /home/pi/geoip_countries.conf
  done
  ;;
  *)
  echo "[$APPNAME][$(date)] Configuration not set or has a wrong value (use only allow or block). Defaulting to allow all"
  sed -i '/^##config-to-be-added.*/a default yes;' /home/pi/geoip_countries.conf
esac

